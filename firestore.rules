service cloud.firestore {
  match /databases/{database}/documents {

		// Rules for APP
    match /apps/ccip {
      allow read;
    }

		// Rules for USERS
    match /apps/ccip/users/{docid} {
      allow read: if isSignedIn() && (request.auth.uid == docid || userHasRole('users'));
      allow create: if isSignedIn();
      allow update: if request.auth.uid == docid || userHasRole('users');
    }

		// Rules for DIRECTORY
    match /apps/ccip/directory/{docid} {
      allow read;
      allow write: if isSignedIn() && userHasRole('users');
    }

		// Rules for GALLERY
    match /apps/ccip/gallery/{docid} {
      allow read;
      allow write: if isSignedIn() && userHasRole('gallery');
    }

		// Rules for RECORDINGS
    match /apps/ccip/recordings/{docid} {
      allow read;
      allow write: if isSignedIn() && userHasRole('recordings');
    }

		// Rules for NAVIGATION
    match /apps/ccip/navigation/{docid} {
      allow read;
      allow write: if isSignedIn() && userHasRole('navigation');
    }

		// Rules for BELIEFS
    match /apps/ccip/beliefs/{belief} {
      allow read;
      allow write: if isSignedIn() && userHasRole('beliefs');
    }

		// AUTHORIZATION FUNCTIONS
		// ----------------------------------

		// Get the current data in the document
    function existingData() {
      return resource.data
    }

		// Get the data the user is attempting to upload
    function incomingData() {
      return request.resource.data
    }

		// Check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

		// Get the document associated with the user who is attempting to do something
    function getUserData() {
      return get(/databases/$(database)/documents/apps/ccip/users/$(request.auth.uid)).data;
    }

		// Check if the user has a certain role
    function userHasRole(role) {
      return getUserData().roles[role] == true;
    }

		// Check if the user has any role from a list (OR)
    function userHasAnyRole(roles) {
      return getUserData().roles.keys().hasAny(roles);
    }

		// Check if a user has all roles from a list (AND)
    function userHasAllRoles(roles) {
      return getUserData().roles.keys().hasAll(roles);
    }
    
  }
}

